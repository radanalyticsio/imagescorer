# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VOC(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, voc: str=None):  # noqa: E501
        """VOC - a model defined in Swagger

        :param voc: The voc of this VOC.  # noqa: E501
        :type voc: str
        """
        self.swagger_types = {
            'voc': str
        }

        self.attribute_map = {
            'voc': 'voc'
        }

        self._voc = voc

    @classmethod
    def from_dict(cls, dikt) -> 'VOC':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VOC of this VOC.  # noqa: E501
        :rtype: VOC
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voc(self) -> str:
        """Gets the voc of this VOC.


        :return: The voc of this VOC.
        :rtype: str
        """
        return self._voc

    @voc.setter
    def voc(self, voc: str):
        """Sets the voc of this VOC.


        :param voc: The voc of this VOC.
        :type voc: str
        """
        allowed_values = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat", "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli", "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed", "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone", "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors", "teddy bear", "hair drier", "toothbrush"]  # noqa: E501
        if voc not in allowed_values:
            raise ValueError(
                "Invalid value for `voc` ({0}), must be one of {1}"
                .format(voc, allowed_values)
            )

        self._voc = voc
